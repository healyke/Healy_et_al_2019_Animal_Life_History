repo_output[k] <-   as.vector(trophic_data[trophic_data$species
== as.vector(ind_vital[k,"species_ind_full"]),
"mass_specific_reproductive_output_g_g"])
met_rate[k] <-   as.vector(trophic_data[trophic_data$species
== as.vector(ind_vital[k,"species_ind_full"]),
"mass_specific_metabolic_rate_w_kg"])
IUCN[k] <-   as.vector(trophic_data[trophic_data$species
== as.vector(ind_vital[k,"species_ind_full"]),
"IUCN_statues"])
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
pop_vital <- data.frame(ind_vital,
mass_g,
mode_of_life,
repo_output,
met_rate,
IUCN,
min_max
)
pop_vital$species_ind_full
unique(pop_vital$species_ind_full)
#Spline bins
sbins <- 100
#lets calculate for Ireland
Irish_rows_1960 <- as.numeric(rownames(keyfitz$countryyear[keyfitz$countryyear$country
== "Ireland" & keyfitz$countryyear$year > 1960,]))
Irish_rows_1920 <- as.numeric(rownames(keyfitz$countryyear[keyfitz$countryyear$country
== "Ireland" & keyfitz$countryyear$year < 1960,]))
#lets calculate for Sweden
Sweden_rows_a60 <- as.numeric(rownames(keyfitz$countryyear[keyfitz$countryyear$country
== "Sweden" & keyfitz$countryyear$year > 1960,]))
Sweden_rows_1850_19 <- as.numeric(rownames(keyfitz$countryyear[keyfitz$countryyear$country
== "Sweden" & keyfitz$countryyear$year > 1850
& keyfitz$countryyear$year < 1901,]))
#lets calculate for Japan
Japan_rows_b60 <- as.numeric(rownames(keyfitz$countryyear[keyfitz$countryyear$country
== "Japan" & keyfitz$countryyear$year < 1960,]))
Japan_rows_a60 <- as.numeric(rownames(keyfitz$countryyear[keyfitz$countryyear$country
== "Japan" & keyfitz$countryyear$year > 1960,]))
##average the pops to make mean matrices
Irish_mat_1960 <- keyfitz$Agam100[Irish_rows_1960]
Irish_mat_1920 <- keyfitz$Agam100[Irish_rows_1920]
Sweden_rows_1850_19 <- keyfitz$Agam100[Sweden_rows_1850_19]
Sweden_rows_a60 <- keyfitz$Agam100[Sweden_rows_a60]
japan_mat_b60 <- keyfitz$Agam100[Japan_rows_b60]
japan_mat_a60 <- keyfitz$Agam100[Japan_rows_a60]
Irish_1960 <- meanMatrix(Irish_mat_1960)
Irish_1920 <- meanMatrix(Irish_mat_1920)
Sweden_1850_19 <- meanMatrix(Sweden_rows_1850_19)
Sweden_a60 <- meanMatrix(Sweden_rows_a60)
japan_b60 <- meanMatrix(japan_mat_b60)
japan_a60 <- meanMatrix(japan_mat_a60)
##you need to put this in the right order
human_pop <- c("Homo_Irish1920" ,
"Homo_Irish1960",
"Sweden_1850_19",
"Sweden_a60",
"japan_b60",
"japan_a60")
human_mats <- list(Irish_1920,
Irish_1960,
Sweden_1850_19,
Sweden_a60,
japan_b60,
japan_a60)
##pop names and year
pop_country_year <- vector()
##mean life expectancy
h_mean_life_expect <- vector()
##age (year) when 99% of cohort are dead
h_surv_99 <- vector()
##age (year) when 95% of cohort are dead
h_surv_95 <- vector()
##life expectancy contingent on entering reproduction
h_M_rep_lif_exp <- vector()
##Age at first reproduction
h_life_time_La <- vector()
#generation time
h_gen_time <- vector()
##mean reproduction rate raw
h_mean_repo_rate <- vector()
##mean reproduction rate
h_mean_repo_rate_stable_state <- vector()
#matrix dimension size
h_matrix_size <- vector()
h_gini <- vector()
h_mxlxsd <- vector()
h_surv_sd <- vector()
prop_h_la<- vector()
fx_h_curve <- list()
h_lxmx_curve_list <- list()
h_spline_curve <- list()
##La_h_sbins converts the age of maturity to the right point on the
#spline sampled curve
La_h_sbins <- vector()
for(i in 1:length(human_mats)){
tryCatch({
###we first need to decompose the A matrices into U F and C matrices
A_hum <-  human_mats[[i]]
U_hum <- A_hum
U_hum[1,] <- 0
F_hum <- matrix(0,dim(A_hum)[1],dim(A_hum)[1])
F_hum[1,] <- A_hum[1,]
C_hum <- matrix(0,dim(A_hum)[1],dim(A_hum)[1])
## country and year
pop_country_year[i] <- human_pop[i]
## matrix dimesnion
h_matrix_size[i] <- dim(A_hum)[1]
##### mean life expectancy
h_mean_life_expect[i] <-	meanLifeExpectancy(matU = U_hum,
startLife= 1)
##### age when 95% are dead
h_surv_95[i] <- exceptionalLife(U_hum, startLife=1)[1]
##### age when 99% are dead
h_surv_99[i] <- which(log10(makeLifeTable(
matU =  U_hum,
matF =  F_hum,
matC =  C_hum,
startLife = 1, nSteps = 1000)$lx*1000) < 0)[2]
##### age at first reproduction
h_life_time_La[i] <-	lifeTimeRepEvents(matU = U_hum,
matF = F_hum,
startLife = 1)$La
##life expectancy conditional on reaching reproduction
h_M_rep_lif_exp[i] <- lifeTimeRepEvents(matU =  U_hum,
matF =  F_hum,
startLife = 1)$meanRepLifeExpectancy
##### generation time from popbio package
h_gen_time[i]  <- generation.time(A =  A_hum)
### mean reproduction rate at stable state distribution
h_mean_repo_rate_stable_state[i] <- meanRepo(matA = A_hum,
matF = F_hum)
### mean reproduction rate not at stable state distribution
h_mean_repo_rate[i] <- mean(F_hum[1,])
####calulculate the lxmx curve
#I use h_surv_99 as the cut off point
h_lxmx_curve <-  makeLifeTable(matU =  U_hum,
matF =  F_hum,
matC =  C_hum,
startLife = 1,
nSteps = h_surv_99[i])
h_lxmx_curve_list[[i]] <-  makeLifeTable(matU =  U_hum,
matF =  F_hum,
matC =  C_hum,
startLife = 1,
nSteps = h_surv_99[i])
h_spline_curve[[i]] <-  unlist(lx_spline(h_lxmx_curve_list[[i]]$lx,
h_lxmx_curve_list[[i]]$x,
bins = sbins)[1])
La_h_sbins[i] <- round((h_life_time_La[i]/h_surv_99[i])*sbins)
h_gini[i] <- Gini(h_lxmx_curve$lx*h_lxmx_curve$mx)
h_mxlxsd[i] <- sd(h_lxmx_curve$lx*h_lxmx_curve$mx)
prop_h_la[i]<- h_spline_curve[[i]][La_h_sbins[i]]
###f(x) for humans
for(z in 1:c(length(h_spline_curve[[i]])-1)){
if(z == 1){fx_h_curve[i][1] <- 1 - c(h_spline_curve[[i]][z+1])}
else{ fx_h_curve[[i]][z] <- c(h_spline_curve[[i]][z]) - h_spline_curve[[i]][z+1]
}
}
h_surv_sd[i] <- sd(fx_h_curve[[i]],
na.rm = TRUE)
},error=function(e){cat("ERROR :", conditionMessage(e), "\n")})
}
h_ind_vital <- data.frame(
pop_country_year,
h_mean_life_expect,
h_life_time_La,
h_mean_repo_rate_stable_state,
h_mean_repo_rate,
h_gen_time,
h_gini,
h_M_rep_lif_exp,
h_matrix_size,
h_surv_95,
h_surv_99,
h_surv_sd,
h_mxlxsd,
prop_h_la
)
human_dem <- data.frame(species_ind_full = rep("Homo_sapiens", length(human_pop)),
taxa_name =  rep("Mammalia" ,length(pop_country_year)),
pop_mat_name = pop_country_year,
mean_life_expect = h_mean_life_expect,
life_time_La = h_life_time_La,
mean_repo_rate = h_mean_repo_rate,
mean_repo_rate_stable_state = h_mean_repo_rate_stable_state,
gen_time = h_gen_time,
M_rep_lif_exp = h_M_rep_lif_exp,
matrix_size = h_matrix_size,
surv_95 = h_surv_99,
surv_99 = h_surv_95,
gini = h_gini,
mxlxsd = h_mxlxsd,
surv_sd = h_surv_sd,
prop_la = prop_h_la,
mass_g =  rep(trophic_data[trophic_data$species
== "Homo_sapiens",
"body_mass_g"],
length(pop_country_year)),
mode_of_life = rep(trophic_data[trophic_data$species
== "Homo_sapiens",
"mode_of_life"],
length(pop_country_year)),
repo_output = rep(trophic_data[trophic_data$species
== "Homo_sapiens",
"mass_specific_reproductive_output_g_g"],
length(pop_country_year)),
met_rate = rep(trophic_data[trophic_data$species
== "Homo_sapiens",
"mass_specific_metabolic_rate_w_kg"],
length(pop_country_year)),
IUCN = rep(trophic_data[trophic_data$species
== "Homo_sapiens","IUCN_statues"],
length(pop_country_year)),
min_max = h_surv_99)
full_m_data <- rbind(pop_vital,human_dem)
full_m_data$species_ind_full
unique(full_m_data$species_ind_full)
full_m_data$met_type <- as.vector(full_m_data$taxa)
full_m_data[full_m_data$taxa == "Aves"|full_m_data$taxa == "Mammalia" ,
"met_type"] <- "endo"
full_m_data[!(full_m_data$taxa == "Aves"|full_m_data$taxa == "Mammalia") ,
"met_type"] <- "ecto"
unique(full_m_data$species_ind_full)
pop_data <- full_m_data
##Spratt have lifespans greater then 100 years according the matrices so were removed.
pop_data_sr <- pop_data[pop_data$species != "Sprattus_sprattus",]
##The Northern muriqui also gives much longer lifespans (>105) than any record.
pop_data_sr2 <- pop_data_sr[pop_data_sr$species != "Brachyteles_hypoxanthus",]
##Scolytus_ventralis is coded in as annual but is clearly a seasonal species.
pop_data_sr3 <- pop_data_sr2[pop_data_sr2$species != "Scolytus_ventralis",]
##The study for Enhydra_lutris is a simulation based study so we remove it.
pop_data_sr4 <- pop_data_sr3[pop_data_sr3$species != "Enhydra_lutris",]
##Problems with the repoductive elements.
pop_data_sr5 <- pop_data_sr4[pop_data_sr3$species != "Somateria_mollissima",]
##remove the population colunm
drops <- c("pop_mat_name")
pop_data_nopop <- pop_data_sr5[,!(names(pop_data_sr5) %in% drops)]
#rename the species_ind_full col name to "species"
colnames(pop_data_nopop)[1] <- "species"
unique(full_m_data$species_ind_full)
unique(pop_data_nopop$species_ind_full)
##remove infinities
pop_data_infr  <- do.call(data.frame,
lapply(pop_data_nopop,
function(x) replace(x,
is.infinite(x),
NA)))
full_infna_data <- na.omit(pop_data_infr)
full_infna_data
full_infna_data$species
pop_data <- full_m_data
unique(pop_data$species_ind_full)
pop_data_sr <- pop_data[pop_data$species != "Sprattus_sprattus",]
unique(pop_data_sr$species_ind_full)
length(unique(pop_data_sr$species_ind_full))
length(unique(pop_data$species_ind_full))
length(unique(pop_data_sr2$species_ind_full))
length(unique(pop_data_sr3$species_ind_full))
length(unique(pop_data_sr4$species_ind_full))
length(unique(pop_data_sr5$species_ind_full))
pop_data[pop_data$species != "Somateria_mollissima",]
pop_data[pop_data$species == "Somateria_mollissima",]
length(unique(pop_data_sr5$species_ind_full))
length(unique(pop_data_sr4$species_ind_full))
length(unique(pop_data_sr3$species_ind_full))
pop_data_sr5 <- pop_data_sr4[pop_data_sr4$species != "Somateria_mollissima",]
pop_data_sr5
length(unique(pop_data_sr5$species_ind_full))
drops <- c("pop_mat_name")
pop_data_nopop <- pop_data_sr5[,!(names(pop_data_sr5) %in% drops)]
pop_data_nopop
pop_data_nopop$species_ind_full
unique(pop_data_nopop$species_ind_full)
colnames(pop_data_nopop)[1] <- "species"
pop_data_nopop
unique(pop_data_nopop$species_ind_full)
drops <- c("pop_mat_name")
pop_data_nopop <- pop_data_sr5[,!(names(pop_data_sr5) %in% drops)]
unique(pop_data_nopop$species_ind_full)
unique(pop_data_nopop$species_ind_full)
colnames(pop_data_nopop)[1] <- "species"
unique(pop_data_nopop$species_ind_full)
unique(pop_data_nopop$species)
##remove infinities
pop_data_infr  <- do.call(data.frame,
lapply(pop_data_nopop,
function(x) replace(x,
is.infinite(x),
NA)))
full_infna_data <- na.omit(pop_data_infr)
full_infna_data
full_infna_data$species
unique(full_infna_data$species)
pop_data_infr
pop_data_infr$species
unique(pop_data_infr$species)
pop_data_infr[,18:20]
pop_data_infr[,18:21]
pop_data_infr[,18:22]
pop_data_infr[,18:23]
pop_data_infr[,18:22]
cbind(na.omit(pop_data_infr[,1:17]), pop_data_infr[,18:22])
na.omit(pop_data_infr[,1:17])
is.na(pop_data_infr[,1:17])
any(is.na(pop_data_infr[1,1:17]))
completeFun(pop_data_infr,pop_data_infr[,1:17])
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
completeFun(pop_data_infr,pop_data_infr[,1:17])
pop_data_infr
complete.cases
complete.cases(pop_data_infr[, pop_data_infr[,1:17]])
pop_data_infr[,1:17]
complete.cases(pop_data_infr[, pop_data_infr[,1:17]])
class(pop_data_infr)
complete.cases(pop_data_infr[, 1:17])
full_infna_data <-  completeFun(pop_data_infr, pop_data_infr[,1:17])
complete.cases(pop_data_infr[,1:17])
complete.cases[complete.cases(pop_data_infr[,1:17]),]
complete.cases(pop_data_infr[,1:17])
complet_row <- complete.cases(pop_data_infr[,1:17])
pop_data_infr[complet_row,]
pop_data_infr[complet_row,1]
length(unique(pop_data_infr[complet_row,1]))
length(unique(pop_data_infr[complet_row,1]))
##remove infinities
pop_data_infr  <- do.call(data.frame,
lapply(pop_data_nopop,
function(x) replace(x,
is.infinite(x),
NA)))
full_infna_data <- pop_data_infr[complete.cases(pop_data_infr[,1:17]),]
full_infna_data
full_infna_data$species
##add a column to idenfy pgls match up
phylo_match_data <- data.frame(full_infna_data, animal = full_infna_data$species)
pgls_unique_matched <- data.frame(species = unique(phylo_match_data$species),
species_pgls = unique(phylo_match_data$animal))
axis_trees <- list()
for(i in 1:(length(com_tree))){
tree_ren <- com_tree[[i]]
#tree match
axis_comp<- comparative.data(phy = tree_ren,
data = pgls_unique_matched,
names.col = "species_pgls" , force.root = TRUE)
axis_trees[[i]] <- axis_comp$phy
}
class(axis_trees) <- "multiPhylo"
axis_comp$dropped$unmatched.rows
full_infna_data$species
axis_comp$data$species
axis_comp$data
axis_comp$data
##subset the data
phylo_match_mammal  <- phylo_match_data[phylo_match_data$taxa_name == "Mammalia",]
pgls_unique_mammal <- data.frame(species = unique(phylo_match_mammal$species),
species_pgls = unique(phylo_match_mammal$animal))
phylo_match_aves  <- phylo_match_data[phylo_match_data$taxa_name == "Aves",]
pgls_unique_aves <- data.frame(species = unique(phylo_match_aves$species),
species_pgls = unique(phylo_match_aves$animal))
phylo_match_endo  <- phylo_match_data[phylo_match_data$met_type == "endo",]
pgls_unique_endo <- data.frame(species = unique(phylo_match_endo$species),
species_pgls = unique(phylo_match_endo$animal))
phylo_match_ecto  <- phylo_match_data[phylo_match_data$met_type == "ecto",]
pgls_unique_ecto <- data.frame(species = unique(phylo_match_ecto$species),
species_pgls = unique(phylo_match_ecto$animal))
mam_trees <- list()
aves_trees <- list()
endo_trees <- list()
ecto_trees <- list()
for(i in 1:(length(com_tree))){
tree_ren <- com_tree[[i]]
#tree match mammals
mam_comp<- comparative.data(phy = tree_ren,
data = pgls_unique_mammal,
names.col = "species_pgls" , force.root = TRUE)
mam_trees[[i]] <- mam_comp$phy
#aves
aves_comp<- comparative.data(phy = tree_ren,
data = pgls_unique_aves,
names.col = "species_pgls" , force.root = TRUE)
aves_trees[[i]] <- aves_comp$phy
#endo
endo_comp<- comparative.data(phy = tree_ren,
data = pgls_unique_endo,
names.col = "species_pgls" , force.root = TRUE)
endo_trees[[i]] <- endo_comp$phy
#ecto
ecto_comp<- comparative.data(phy = tree_ren,
data = pgls_unique_ecto,
names.col = "species_pgls" , force.root = TRUE)
ecto_trees[[i]] <- ecto_comp$phy
}
class(mam_trees) <- "multiPhylo"
class(aves_trees) <- "multiPhylo"
class(endo_trees) <- "multiPhylo"
class(ecto_trees) <- "multiPhylo"
phylo_match_data
phylo_match_data$species
phylo_match_data$species
unique(phylo_match_data$species)
getwd()
write.csv(phylo_match_data, file = "axis_analysis_data.csv", row.names = FALSE)
write.csv(phylo_match_mammal, file = "mammal_analysis_data.csv", row.names = FALSE)
write.csv(phylo_match_aves, file = "aves_analysis_data.csv", row.names = FALSE)
write.csv(phylo_match_endo, file = "endo_analysis_data.csv", row.names = FALSE)
write.csv(phylo_match_ecto, file = "ecto_analysis_data.csv", row.names = FALSE)
write.tree(axis_trees, file = "axis_analysis_phylo.tre")
write.tree(mam_trees, file = "mam_analysis_phylo.tre")
write.tree(aves_trees, file = "aves_analysis_phylo.tre")
write.tree(endo_trees, file = "endo_analysis_phylo.tre")
write.tree(ecto_trees, file = "ecto_analysis_phylo.tre")
hi_pop <- 3
low_pop <- 1
sea_value <- -1
sum(hi_pop - sea_value)
sum((hi_pop - sea_value))
(hi_pop - sea_value)
(hi_pop + sea_value)
hi_pop
sea_value
(hi_pop + sea_value)
(hi_pop + sea_value)*3
((hi_pop + sea_value)*3)/2
((hi_pop + sea_value)*3)^2/2
sqrt(((hi_pop + sea_value)*3)^2/2)
sqrt(((hi_pop + sea_value)*3)^2/2)
sqrt(((low_pop + sea_value)*3)^2/2)
low_pop
hi_pop <- 4
low_pop <- 2
sqrt(((low_pop + sea_value)*3)^2/2)
sqrt(((hi_pop + sea_value)*3)^2/2)
sqrt(((hi_pop + sea_value)*3)^2/2)/hi_pop
sqrt(((low_pop + sea_value)*3)^2/2)/low_pop
sqrt(((hi_pop + sea_value)*3)^2/2)
sqrt((((hi_pop + sea_value)*3)^2/2)/hi_pop)
sqrt((((low_pop + sea_value)*3)^2/2)/low_pop)
sqrt((((hi_pop + sea_value)*3)^2/2)/hi_pop)
sqrt((((low_pop + sea_value)*3)^2/2)/low_pop)
sqrt((((hi_pop + sea_value)*3)^2/2*hi_pop))
sqrt((((low_pop + sea_value)*3)^2/2*low_pop))
sqrt((((hi_pop + sea_value)*3)^2/2*hi_pop))
low_pop + sea_value
low_pop
sqrt(((hi_pop + sea_value)*3)^2/2)
sqrt(((low_pop + sea_value)*3)^2/2)
sqrt(((low_pop + sea_value)*3)^2/2)/mean((low_pop + sea_value)*3))
(low_pop + sea_value)*3)
(low_pop + sea_value)*3
(low_pop + sea_value)
mean((low_pop + sea_value)*3)
(low_pop + sea_value)*3
mean((low_pop + sea_value))
(high_pop + sea_value)
(hi_pop + sea_value)
sqrt(((hi_pop + sea_value)*3)^2/2)/hi_pop
sqrt(((hi_pop + sea_value)*3)^2/2)/3
sqrt(((low_pop + sea_value)*3)^2/2)/1
sqrt(((low_pop + sea_value)*3)^2/3)/1
sqrt(((hi_pop + sea_value)*3)^2/3)/3
mean(1,1,1,0)
mean(1,1,1,low_pop)
sea_value
(low_pop + sea_value)*3)^2/3
((low_pop + sea_value)*3)^2/3
low_pop + sea_value
((low_pop + sea_value)*3)^2/3
((low_pop + sea_value)^2 + (low_pop + sea_value)^2 + (low_pop + sea_value)^2)/2
((low_pop + sea_value)^2 + (low_pop + sea_value)^2 + (low_pop + sea_value)^2)/2
((low_pop + sea_value)^2 + (low_pop + sea_value)^2 + (low_pop + sea_value)^2)/3
((low_pop + sea_value)^2 + (low_pop + sea_value)^2 + (low_pop + sea_value)^2)/2
3-1
sd(low_pop + sea_value)/mean()
c(low_pop + sea_value,low_pop + sea_value, low_pop + sea_value )
low_list <- c(low_pop + sea_value,low_pop + sea_value, low_pop + sea_value )
hi_list <- c(hi_pop + sea_value,hi_pop + sea_value, hi_pop + sea_value )
sd(low_list)/mean(low_list)
sd(hi_list)/mean(hi_list)
hi_list
sd(hi_list)/hi_list
sd(hi_list)/hi_list[1]
sd(low_list)/low_list[1]
low_list[1]
sd(hi_list)/4
sd(low_list)/2
sd(low_list)
sd(low_list)
gini()
library(ineq)
gini()
Gini(1000, 1,1)
Gini(10, 1,1)
Gini(c(1,1,1))
Gini(c(1,1,1000000))
Gini(c(1,1,100000000000))
Gini(c(1,1,1000000000000000))
Gini(c(100,1,1000000000000000))
Gini(c(100,1,1000,)
)
Gini(c(100,1,1000))
Gini(c(100,1,100))
Gini(c(100,10,100))
Gini(c(100,100,100))
Gini(c(100,-1,-1))
Gini(c(5,-1,-1))
Gini(c(3,-1,-1))
Gini(c(50,30,20))
Gini(c(5,3,2))

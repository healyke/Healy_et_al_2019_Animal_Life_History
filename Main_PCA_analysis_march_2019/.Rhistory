pop_data[pop_data$mobility == "benthic",]
results <- pca_res
results$rotation[,"PC1"] <- -results$rotation[,"PC1"]
results$x[,"PC1"] <- -results$x[,"PC1"]
results$rotation[,"PC2"] <- -results$rotation[,"PC2"]
results$x[,"PC2"] <- -results$x[,"PC2"]
result <- results
loadings <- as.data.frame(result$rotation)
#loadings_nst <- as.data.frame(results_nst$rotation)
loadings[,"col"]=c("gray50",
"gray50",
"gray50",
"gray50",
"gray50",
"gray50"
)
loadings$LHT=rownames(loadings)
loadings$LHT=c("surv_sd",
"La",
"gen_time",
"mean_repo_rate",
"M_suv"
,"gini_r"
)
loadings$LHTexpr <-  list(
expression(sigma),
expression("L"[alpha]),
expression("T"),
expression(phi),
expression(Rep["e"]),
expression("G")
)
arrowThickness=2.9
sizeArrowLetters=1
scalingArrows=2.5
scalingLetters=2.9
class_match <- vector()
species_match <- vector()
loads_taxa <- data.frame(results$x)
for(i in 1:length(loads_taxa[,1])){
class_match[i] <- as.vector(pop_multree$data[i,"taxa_name"])
species_match[i] <- as.vector(pop_multree$data[i,"species"])
}
pca_data <- cbind(loads_taxa,class_match, species_match)
##rename some of the mode of life levels
PCA1 <- pca_data[,1]
PCA2 <- pca_data[,2]
mobility_PCA <- pop_multree$data$mobility
mobility_PCA <- as.vector(mobility_PCA)
mobility_PCA[mobility_PCA == "fw_benthic"] <- "benthic"
mobility_PCA[mobility_PCA == "m_benthic"] <- "benthic"
mobility_PCA[mobility_PCA == "fw_pelagic"] <- "pelagic"
mobility_PCA[mobility_PCA == "m_pelagic"] <- "pelagic"
mobility_PCA[mobility_PCA == "fw_river"] <- "benthic"
mobility_PCA <- factor(mobility_PCA, levels = c("sessile", "arboreal", "benthic", "volant",
"semiaquatic", "terrestrial" ,"pelagic",  "semifossorial"))
pca_data$mobility_PCA <- mobility_PCA
PCA_moblist <- list(semifossorial = pca_data[pca_data$mobility_PCA == "semifossorial",1],
pelagic = pca_data[pca_data$mobility_PCA == "pelagic",1],
terrestrial = pca_data[pca_data$mobility_PCA == "terrestrial",1],
semiaquatic = pca_data[pca_data$mobility_PCA == "semiaquatic",1],
volant = pca_data[pca_data$mobility_PCA == "volant",1],
benthic = pca_data[pca_data$mobility_PCA == "benthic",1],
arboreal = pca_data[pca_data$mobility_PCA == "arboreal",1],
sessile = pca_data[pca_data$mobility_PCA == "sessile",1]
)
mam_col <- rgb(0,136,170, max= 255)
bird_col <- rgb(255,153,85, max= 255)
rep_col <- rgb(147,172,147, max= 255)
fish_col <- rgb(135,205,222, max= 255)
sponge_col <- rgb(211,95,141, max= 255)
coral_col <- rgb(153,85,255, max= 255)
gast_col <- rgb(255,170,238, max= 255)
biv_col <- rgb(205,135,222, max= 255)
shark_col <- rgb(85,0,212, max= 255)
#pdf("Figure2_PCA.pdf")
split <- rbind(c(0.15,0.9, 0.4,0.98), c(0.15,0.9, 0.1, 0.4))
split.screen(split)
screen(1)
par(mar = c(0, 0, 0, 0))
plot(pca_data[,1], pca_data[,2], pch=16, cex = 0.1, col = "white", xlab= "PCA",
ylab= "PCA 2")
points(pca_data[pca_data$class_match == "Mammalia",1], pca_data[pca_data$class_match == "Mammalia",2], pch=16, col = mam_col)
points(pca_data[pca_data$class_match == "Aves",1], pca_data[pca_data$class_match == "Aves",2], pch=16, col = bird_col)
points(pca_data[pca_data$class_match == "Reptilia",1], pca_data[pca_data$class_match == "Reptilia",2], pch=16, col = rep_col)
points(pca_data[pca_data$class_match == "Actinopterygii",1], pca_data[pca_data$class_match == "Actinopterygii",2], pch=16, col = fish_col)
points(pca_data[pca_data$class_match == "Gastropoda",1], pca_data[pca_data$class_match == "Gastropoda",2], pch=16, col = gast_col)
points(pca_data[pca_data$class_match == "Demospongiae",1], pca_data[pca_data$class_match == "Demospongiae",2], pch=16, col = sponge_col)
points(pca_data[pca_data$class_match == "Anthozoa",1], pca_data[pca_data$class_match == "Anthozoa",2], pch=16, col = coral_col)
points(pca_data[pca_data$class_match == "Bivalvia",1], pca_data[pca_data$class_match == "Bivalvia",2], pch=16,col = biv_col)
points(pca_data[pca_data$class_match == "Elasmobranchii",1], pca_data[pca_data$class_match == "Elasmobranchii",2], pch=16,col = shark_col)
###And lets add Humans
points(pca_data[pca_data$species_match == "Homo_sapiens",1], pca_data[pca_data$species_match == "Homo_sapiens",2], pch= 16, col = "white", cex = 0.7)
##and other points
points(pca_data[pca_data$species_match == "Elephas_maximus",1], pca_data[pca_data$species_match == "Elephas_maximus",2], pch= 16, col = "white", cex = 0.7)
points(pca_data[pca_data$species_match == "Fulmarus_glacialis",1], pca_data[pca_data$species_match == "Fulmarus_glacialis",2], pch= 16, col = "white", cex = 0.7)
points(pca_data[pca_data$species_match == "Tympanuchus_cupido",1], pca_data[pca_data$species_match == "Tympanuchus_cupido",2], pch= "T", col = "white")
points(pca_data[pca_data$species_match == "Gyps_coprotheres",1], pca_data[pca_data$species_match == "Gyps_coprotheres",2], pch= 16, col = "white", cex = 0.7)
points(pca_data[pca_data$species_match == "Crocodylus_johnsoni",1], pca_data[pca_data$species_match == "Crocodylus_johnsoni",2], pch= 16, col = "white", cex = 0.7)
points(pca_data[pca_data$species_match == "Urocitellus_armatus",1], pca_data[pca_data$species_match == "Urocitellus_armatus",2], pch= 16, col = "white", cex = 0.7)
points(pca_data[pca_data$species_match == "Paramuricea_clavata",1], pca_data[pca_data$species_match == "Paramuricea_clavata",2], pch= 16, col = "white", cex = 0.7)
points(pca_data[pca_data$species_match == "Oncorhynchus_tshawytscha",1], pca_data[pca_data$species_match == "Oncorhynchus_tshawytscha",2], pch= 16, col = "white", cex = 0.7)
points(pca_data[pca_data$species_match == "Mya_arenaria",1], pca_data[pca_data$species_match == "Mya_arenaria",2], pch= 16, col = "white", cex = 0.7)
points(pca_data[pca_data$species_match == "Clemmys_guttata",1], pca_data[pca_data$species_match == "Clemmys_guttata",2], pch= 16, col = "white", cex = 0.7)
arrows(x0=0,y0=0,x1=loadings[,1]*scalingArrows,y1=loadings[,2]*scalingArrows,col="black", lwd=2)
arrows(x0=0,y0=0,x1=loadings[,1]*scalingArrows,y1=loadings[,2]*scalingArrows,col=as.character(loadings$col), lwd=arrowThickness)
#arrows(x0=0,y0=0,x1=loadings[,1]*scalingArrows,y1=loadings[,2]*scalingArrows,col="black", lwd=arrowThickness*2)
#arrows(x0=0,y0=0,x1=loadings[,1]*scalingArrows,y1=loadings[,2]*scalingArrows,col=as.character(loadings$col), lwd=arrowThickness)
text(loadings[1,"PC1"]*scalingLetters-.0,loadings[1,"PC2"]*scalingLetters,loadings$LHTexpr[[1]],col = loadings$col[1], cex=sizeArrowLetters)
text(loadings[2,"PC1"]*scalingLetters-.0,loadings[2,"PC2"]*scalingLetters,loadings$LHTexpr[[2]],col = loadings$col[2], cex=sizeArrowLetters)
text(loadings[3,"PC1"]*scalingLetters+.0,loadings[3,"PC2"]*scalingLetters,loadings$LHTexpr[[3]],col = loadings$col[3], cex=sizeArrowLetters)
text(loadings[4,"PC1"]*scalingLetters-.0,loadings[4,"PC2"]*scalingLetters,loadings$LHTexpr[[4]],col = loadings$col[4], cex=sizeArrowLetters)
text(loadings[5,"PC1"]*scalingLetters-.0,loadings[5,"PC2"]*scalingLetters,loadings$LHTexpr[[5]],col = loadings$col[5], cex=sizeArrowLetters)
text(loadings[6,"PC1"]*scalingLetters+.0,loadings[6,"PC2"]*scalingLetters,loadings$LHTexpr[[6]],col = loadings$col[6], cex=sizeArrowLetters)
#text(loadings[7,"PC1"]*scalingLetters+.0,loadings[7,"PC2"]*scalingLetters,loadings$LHTexpr[[7]],col = loadings$col[7], cex=sizeArrowLetters)
screen(2)
par(mar = c(0, 0, 0, 0))
MultiDisPlot(PCA_moblist)
tick_lables <- names(PCA_moblist)
axis(2, 1:length(tick_lables), labels = tick_lables)
mob_match <- as.vector(mobility_PCA)
for(i in 1:(length(tick_lables))){
mob_match[mob_match == tick_lables[i]] <- i
}
mob_match <- as.numeric(mob_match)
pca_data$mob_match <- mob_match
points(pca_data[pca_data$class_match == "Mammalia","mob_match"] ~ pca_data[pca_data$class_match == "Mammalia",1], col = mam_col, pch = 20, cex = 0.5)
points(pca_data[pca_data$class_match == "Aves","mob_match"] ~ pca_data[pca_data$class_match == "Aves",1], col = bird_col, pch = 20, cex = 0.5)
points(pca_data[pca_data$class_match == "Reptilia","mob_match"] ~ pca_data[pca_data$class_match == "Reptilia",1], col = rep_col, pch = 20, cex = 0.5)
points(pca_data[pca_data$class_match == "Actinopterygii","mob_match"] ~ pca_data[pca_data$class_match == "Actinopterygii",1], col = fish_col, pch = 20, cex = 0.5)
points(pca_data[pca_data$class_match == "Gastropoda","mob_match"] ~ pca_data[pca_data$class_match == "Gastropoda",1], col = gast_col, pch = 20, cex = 0.5)
points(pca_data[pca_data$class_match == "Demospongiae","mob_match"] ~ pca_data[pca_data$class_match == "Demospongiae",1], col = sponge_col, pch = 20, cex = 0.5)
points(pca_data[pca_data$class_match == "Anthozoa","mob_match"] ~ pca_data[pca_data$class_match == "Anthozoa",1], col = coral_col, pch = 20, cex = 0.5)
points(pca_data[pca_data$class_match == "Bivalvia","mob_match"] ~ pca_data[pca_data$class_match == "Bivalvia",1], col = biv_col, pch = 20, cex = 0.5)
#close.screen(all.screens = TRUE)
#dev.off()
habitat_PCA <- pop_multree$data$habitat
habitat_PCA[habitat_PCA == "marine"] <- "marine"
habitat_PCA[habitat_PCA == "freshwater"] <- "marine"
habitat_PCA[habitat_PCA == "marine-freshwater"] <- "marine"
habitat_PCA <- factor(habitat_PCA, levels = c("terrestrial", "marine"))
pca_data$habitat_PCA <- habitat_PCA
pca_data$animal <- pca_data$species_match
aquatic_res <- pca_data[pca_data$mobility_PCA == "sessile" | pca_data$mobility_PCA == "benthic"
| pca_data$mobility_PCA == "pelagic",]
aquatic_res$mobility_PCA <- factor(aquatic_res$mobility_PCA, levels = c("pelagic", "sessile", "benthic"))
aquatic_res
aquatic_res[,c("mobility_PCA", "animal")]
aquatic_res[aquatic_res$animal == "Genypterus blacodes", ]
aquatic_res[aquatic_res$animal == "Genypterus blacodes", ]
aquatic_res[aquatic_res$animal == "Genypterus_blacodes", ]
pop_data[pop_data$animal == "Genypterus_blacodes", ]
met_PCA <- pop_multree$data$met_rate_Wg
pca_data$met_PCA <- met_PCA
pca_data$animal <- pca_data$species_match
pca_data$met_rate <- as.numeric(as.vector(pca_data$met_PCA))
pop_data <- read.csv("axis_analysis_data_27_mar.csv",
sep = ",", header = T)
names(pop_data)
axis_trees <- read.tree("axis_analysis_phylo.tre")
pop_data
pca_data$met_PCA <- met_PCA
met_PCA
met_PCA
pca_data
species_list22 <- pca_data$animal
species_list22
pca_data[pca_data$animal == species_list22[1],]
species_list22
sort(species_list22)
species_list22 <- sort(species_list22)
pca_data[pca_data$animal == species_list22[1],]
pca_data[pca_data$animal == species_list22[2],]
pca_data[pca_data$animal == species_list22[2],]
pca_data[pca_data$animal == species_list22[1],]
pca_data[pca_data$animal == species_list22[2],]
species_list22 <- sort(unique(species_list22))
pca_data[pca_data$animal == species_list22[1],]
pca_data[pca_data$animal == species_list22[2],]
pca_data[pca_data$animal == species_list22[3],]
pca_data[pca_data$animal == species_list22[4],]
pca_data[pca_data$animal == species_list22[5],]
pca_data[pca_data$animal == species_list22[6],]
pca_data[pca_data$animal == species_list22[7],]
pca_data[pca_data$animal == species_list22[8],]
pca_data[pca_data$animal == species_list22[9],]
pca_data[pca_data$animal == species_list22[10],]
pca_data[pca_data$animal == species_list22[11],]
pca_data[pca_data$animal == species_list22[12],]
pca_data[pca_data$animal == species_list22[13],]
pca_data[pca_data$animal == species_list22[14],]
pca_data[pca_data$animal == species_list22[15],]
pca_data[pca_data$animal == species_list22[16],]
pca_data[pca_data$animal == species_list22[17],]
pca_data[pca_data$animal == species_list22[18],]
pca_data[pca_data$animal == species_list22[19],]
r_size_g <- vector()
notes <- vector()
trophic_again <- read.csv("Trophic_data_June16_2017.csv")
for(k in 1:length(pca_data$species_match)){
r_size_g[k] <- ((trophic_again[trophic_again$species  == as.vector(pca_data$species_match[k]),"repo_size_g"][1])*(trophic_again[trophic_again$species  == as.vector(pca_data$species_match[k]),"no_clutch_year"][1])*(as.numeric(as.vector(trophic_again[trophic_again$species  == as.vector(pca_data$species_match[k]),"clutch_no"][1]))))/((trophic_again[trophic_again$species  == as.vector(pca_data$species_match[k]),"mass_g"]))[1]
notes[k] <- as.character((trophic_again[trophic_again$species  == as.vector(pca_data$species_match[k]),"notes"][1]))
}
egg_size_data0 <- data.frame(PC1 = pca_data$PC1,
r_size_g,
species = pca_data$species_match,
animal = pca_data$species_match,
taxa = pca_data$class_match,
notes = notes)
egg_size_data <- na.omit(egg_size_data0)
egg_size_data
egg_size_data[egg_size_data$species == "Canis_lupus", ]
pca_data[pca_data$animal == species_list22[20],]
pca_data[pca_data$animal == species_list22[21],]
pca_data[pca_data$animal == species_list22[22],]
pca_data[pca_data$animal == species_list22[23],]
pca_data[pca_data$animal == species_list22[24],]
pca_data[pca_data$animal == species_list22[25],]
pca_data[pca_data$animal == species_list22[26],]
pca_data[pca_data$animal == species_list22[27],]
pca_data[pca_data$animal == species_list22[28],]
pca_data[pca_data$animal == species_list22[29],]
pca_data[pca_data$animal == species_list22[30],]
pca_data[pca_data$animal == species_list22[31],]
pca_data[pca_data$animal == species_list22[32],]
pca_data[pca_data$animal == species_list22[33],]
pca_data[pca_data$animal == species_list22[34],]
pca_data[pca_data$animal == species_list22[35],]
pca_data[pca_data$animal == species_list22[36],]
pca_data[pca_data$animal == species_list22[37],]
pca_data[pca_data$animal == species_list22[38],]
pca_data[pca_data$animal == species_list22[39],]
pca_data[pca_data$animal == species_list22[40],]
pca_data[pca_data$animal == species_list22[41],]
pca_data[pca_data$animal == species_list22[42],]
pca_data[pca_data$animal == species_list22[43],]
pca_data[pca_data$animal == species_list22[44],]
pca_data[pca_data$animal == species_list22[45],]
pca_data[pca_data$animal == species_list22[46],]
pca_data[pca_data$animal == species_list22[47],]
pca_data[pca_data$animal == species_list22[48],]
pca_data[pca_data$animal == species_list22[49],]
pca_data[pca_data$animal == species_list22[50],]
pca_data[pca_data$animal == species_list22[51],]
pca_data[pca_data$animal == species_list22[52],]
pca_data[pca_data$animal == species_list22[53],]
pca_data[pca_data$animal == species_list22[54],]
pca_data[pca_data$animal == species_list22[55],]
pca_data[pca_data$animal == species_list22[56],]
pca_data[pca_data$animal == species_list22[57],]
pca_data[pca_data$animal == species_list22[58],]
pca_data[pca_data$animal == species_list22[59],]
pca_data[pca_data$animal == species_list22[60],]
pca_data[pca_data$animal == species_list22[61],]
pca_data[pca_data$animal == species_list22[62],]
pca_data[pca_data$animal == species_list22[63],]
pca_data[pca_data$animal == species_list22[64],]
pca_data[pca_data$animal == species_list22[65],]
pca_data[pca_data$animal == species_list22[66],]
pca_data[pca_data$animal == species_list22[67],]
pca_data[pca_data$animal == species_list22[68],]
pca_data[pca_data$animal == species_list22[69],]
pca_data[pca_data$animal == species_list22[70],]
pca_data[pca_data$animal == species_list22[71],]
pca_data[pca_data$animal == species_list22[72],]
pca_data[pca_data$animal == species_list22[73],]
pca_data[pca_data$animal == species_list22[74],]
pca_data[pca_data$animal == species_list22[74],]
pca_data[pca_data$animal == species_list22[75],]
pca_data[pca_data$animal == species_list22[76],]
pca_data[pca_data$animal == species_list22[76],1]
pca_data[pca_data$animal == species_list22[77],]
pca_data[pca_data$animal == species_list22[78],]
pca_data[pca_data$animal == species_list22[79],]
pca_data[pca_data$animal == species_list22[79],1]
pca_data[pca_data$animal == species_list22[80],]
pca_data[pca_data$animal == species_list22[81],]
pca_data[pca_data$animal == species_list22[82],]
pca_data[pca_data$animal == species_list22[83],]
pca_data[pca_data$animal == species_list22[84],]
pca_data[pca_data$animal == species_list22[85],]
pca_data[pca_data$animal == species_list22[86],]
pca_data[pca_data$animal == species_list22[87],]
egg_size_data[egg_size_data$species == "Phacochoerus_aethiopicus", ]
pca_data[pca_data$animal == species_list22[88],]
pca_data[pca_data$animal == species_list22[89],]
pca_data[pca_data$animal == species_list22[90],]
pca_data[pca_data$animal == species_list22[91],]
pca_data[pca_data$animal == species_list22[92],]
pca_data[pca_data$animal == species_list22[93],]
pca_data[pca_data$animal == species_list22[94],]
pca_data[pca_data$animal == species_list22[95],]
pca_data[pca_data$animal == species_list22[96],]
pca_data[pca_data$animal == species_list22[97],]
egg_size_data[egg_size_data$species == "Rangifer_tarandus", ]
pca_data[pca_data$animal == species_list22[98],]
pca_data[pca_data$animal == species_list22[99],]
pca_data[pca_data$animal == species_list22[100],]
pca_data[pca_data$animal == species_list22[101],]
pca_data[pca_data$animal == species_list22[102],]
species_list22
pca_data[pca_data$animal == species_list22[101],]
pca_data[pca_data$animal == species_list22[102],]
pca_data[pca_data$animal == species_list22[103],]
pca_data[pca_data$animal == species_list22[104],]
pca_data[pca_data$animal == species_list22[105],]
egg_size_data[egg_size_data$species == "Sternula_antillarum", ]
pca_data[pca_data$animal == species_list22[105],]
pca_data[pca_data$animal == species_list22[106],]
pca_data[pca_data$animal == species_list22[107],]
pca_data[pca_data$animal == species_list22[108],]
pca_data[pca_data$animal == species_list22[109],]
pca_data[pca_data$animal == species_list22[110],]
pca_data[pca_data$animal == species_list22[111],]
pca_data[pca_data$animal == species_list22[112],]
pca_data[pca_data$animal == species_list22[113],]
pca_data[pca_data$animal == species_list22[114],]
pca_data[pca_data$animal == species_list22[115],]
pca_data[pca_data$animal == species_list22[116],]
pca_data[pca_data$animal == species_list22[117],]
pca_data[pca_data$animal == species_list22[118],]
pca_data[pca_data$animal == species_list22[119],]
pca_data[pca_data$animal == species_list22[120],]
pca_data[pca_data$animal == species_list22[121],]
makeLifeTable
lx_spline
approx
?approx
aquatic_res
aquatic_res[,1]
aquatic_res[,"animal"]
unique(aquatic_res[,"animal"])
length(unique(aquatic_res[,"animal"]))
length(unique(ter_res[,"animal"]))
ter_res <- pca_data[pca_data$mobility_PCA == "terrestrial" | pca_data$mobility_PCA == "arboreal"
| pca_data$mobility_PCA == "volant" | pca_data$mobility_PCA == "semiaquatic" | pca_data$mobility_PCA == "semifossorial",]
ter_res$mobility_PCA <- factor(ter_res$mobility_PCA, levels = c("terrestrial", "arboreal", "volant", "semiaquatic","semifossorial"))
length(unique(ter_res[,"animal"]))
length((ter_res[,"animal"]))
group.MLtaxa <- groupMetricsML(siber.plots)
group.MLmob <- groupMetricsML(siber.mob)
# options for running jags
parms <- list()
parms$n.iter <- 2 * 10^4   # number of iterations to run the model for
parms$n.burnin <- 1 * 10^3 # discard the first set of values
parms$n.thin <- 10     # thin the posterior by this many
parms$n.chains <- 2        # run this many chains
# define the priors
priors <- list()
priors$R <- 1 * diag(2)
priors$k <- 2
priors$tau.mu <- 1.0E-3
ellipses.posterior <- siberMVN(siber.plots, parms, priors)
###add some ellipses by just using the SIBER stuff
##Set up the data
iucn_statue <- pop_multree$data$iucn_statues
pca_data$iucn_statue <- iucn_statue
therm_PCA <- pop_multree$data$met_type
pca_data$therm_PCA <- therm_PCA
##first we need to set up the data tp be read in as if its an isotope.
siber_pca_data <- pca_data[pca_data$class_match =="Actinopterygii" |
pca_data$class_match == "Anthozoa"|
pca_data$class_match == "Aves"|
pca_data$class_match == "Gastropoda"|
pca_data$class_match == "Mammalia"|
pca_data$class_match == "Reptilia",]
sidpca <- data.frame(iso1 = siber_pca_data$PC1,
iso2 = siber_pca_data$PC2,
group = as.numeric(siber_pca_data$class_match),
community = rep(1,length(siber_pca_data$class_match)))
##we need to get rid of the
sidmob <- data.frame(iso1 = pca_data$PC1,
iso2 = pca_data$PC2,
group = as.numeric(pca_data$mobility_PCA),
community = rep(1,length(pca_data$class_match)))
sidtherm <- data.frame(iso1 = pca_data$PC1,
iso2 = pca_data$PC2,
group = as.numeric(pca_data$therm_PCA),
community = rep(1,length(pca_data$class_match)))
pca_data$iucn_statue <- factor(pca_data$iucn_statue, levels = c("NA", "CE", "E", "LC", "LR", "NT", "V"))
pop_data <- read.csv("axis_analysis_data_6_mar.csv",
sep = ",", header = T)
pop_data <- read.csv("axis_analysis_data_6_march.csv",
sep = ",", header = T)
pop_data <- read.csv("axis_analysis_data_6_march_2019.csv",
sep = ",", header = T)
log_list <- c("life_time_La",
"mean_repo_rate_stable_state",
"mean_repo_rate",
"gen_time",
"M_rep_lif_exp",
"gini",
"surv_sd",
"mass_g",
"mxlxsd",
"matrix_size")
pop_data_log <- pop_data
pop_data_log[,log_list] <- sapply(pop_data[,log_list], function(x) log10(x))
mean_c_list  <- c("life_time_La",
"mean_repo_rate_stable_state",
"mean_repo_rate",
"gen_time",
"M_rep_lif_exp",
"matrix_size",
"gini",
"surv_sd",
"mxlxsd",
"mass_g")
pop_data_log_mc <- pop_data_log
pop_data_log_mc[,mean_c_list] <- sapply(pop_data_log[,mean_c_list], function(x) mean_center(x))
pop_multree <- as.mulTree(data = pop_data_log_mc, tree = axis_trees, taxa = "animal", rand.terms = ~animal + species)
###add some ellipses by just using the SIBER stuff
##Set up the data
iucn_statue <- pop_multree$data$iucn_statues
pca_data$iucn_statue <- iucn_statue
therm_PCA <- pop_multree$data$met_type
pca_data$therm_PCA <- therm_PCA
##first we need to set up the data tp be read in as if its an isotope.
siber_pca_data <- pca_data[pca_data$class_match =="Actinopterygii" |
pca_data$class_match == "Anthozoa"|
pca_data$class_match == "Aves"|
pca_data$class_match == "Gastropoda"|
pca_data$class_match == "Mammalia"|
pca_data$class_match == "Reptilia",]
sidpca <- data.frame(iso1 = siber_pca_data$PC1,
iso2 = siber_pca_data$PC2,
group = as.numeric(siber_pca_data$class_match),
community = rep(1,length(siber_pca_data$class_match)))
##we need to get rid of the
sidmob <- data.frame(iso1 = pca_data$PC1,
iso2 = pca_data$PC2,
group = as.numeric(pca_data$mobility_PCA),
community = rep(1,length(pca_data$class_match)))
sidtherm <- data.frame(iso1 = pca_data$PC1,
iso2 = pca_data$PC2,
group = as.numeric(pca_data$therm_PCA),
community = rep(1,length(pca_data$class_match)))
pca_data$iucn_statue <- factor(pca_data$iucn_statue, levels = c("NA", "CE", "E", "LC", "LR", "NT", "V"))
pca_data$iucn_statue[is.na(pca_data$iucn_statue)] <- "NA"
sired <- na.omit(data.frame(iso1 = pca_data$PC1,
iso2 = pca_data$PC2,
group = as.numeric(pca_data$iucn_statue),
community = rep(1,length(pca_data$class_match))))
siber.plots <- createSiberObject(sidpca)
siber.mob <- createSiberObject(sidmob)
siber.therm <- createSiberObject(sidtherm)
siber.iucn<- createSiberObject(sired)
# Create lists of plotting arguments to be passed onwards to each
# of the three plotting functions.
community.hulls.args <- list(col = 1, lty = 1, lwd = 1)
group.ellipses.args  <- list(n = 100, p.interval = 0.95,
lty = 1, lwd = 2)
group.hull.args      <- list(lty = 2, col = "grey20")
#plot for taxa
plotSiberObject(siber.plots,
ax.pad = 2,
hulls = F, community.hulls.args,
ellipses = T, group.ellipses.args,
group.hulls = T, group.hull.args,
bty = "L",
iso.order = c(1,2),
xlab = "PC1",
ylab = "PC2"
)
#plot for mode-of-life
plotSiberObject(siber.mob,
ax.pad = 2,
hulls = F, community.hulls.args,
ellipses = T, group.ellipses.args,
group.hulls = F, group.hull.args,
bty = "L",
iso.order = c(1,2),
xlab = "PC1",
ylab = "PC2"
)
#plot for ecto endo
plotSiberObject(siber.therm,
ax.pad = 2,
hulls = F, community.hulls.args,
ellipses = T, group.ellipses.args,
group.hulls = F, group.hull.args,
bty = "L",
iso.order = c(1,2),
xlab = "PC1",
ylab = "PC2"
)
#plot for iucn
plotSiberObject(siber.iucn,
ax.pad = 2,
hulls = F, community.hulls.args,
ellipses = T, group.ellipses.args,
group.hulls = F, group.hull.args,
bty = "L",
iso.order = c(1,2),
xlab = "PC1",
ylab = "PC2"
)
therm_PCA
pop_multree
pop_multree$data
iucn_statue <- pop_multree$data$iucn_statues
iucn_statue
therm_PCA
results <- pca_res
results$rotation[,"PC1"] <- -results$rotation[,"PC1"]
results$x[,"PC1"] <- -results$x[,"PC1"]
results$rotation[,"PC2"] <- -results$rotation[,"PC2"]
results$x[,"PC2"] <- -results$x[,"PC2"]
dev.new()
dev.new()
biplot(results)
biplot(pca_res)

#Metazoan backbone
met_tree <- read.tree("metazoa.tre")
require(mulTree)
library(devtools)
library(MASS)
library(popbio)
library(popdemo)
library(phytools)
source("Demography_functions.R")
source("phylo_bind_functions.R")
load("COMADRE_v_2.0.0.9.RData")
mammal_phy <- read.nexus("FritzTree.rs200k.100trees.tre")
#Metazoan backbone
met_tree <- read.tree("metazoa.tre")
c(0,92,54,93)
tt <- c(0,92,54,93)
30/6
30/5
tt <- c(0,(92/100)*6,(54/100)*12,(93/100)*6)
tt <- c(0*6,(92/100)*6,(54/100)*12,(93/100)*6)
tt
sum(tt)
sum(tt) + (38/100)*70
(38/100)*70
70*0.38
tt_5 <- c(0*5,(92/100)*5,(54/100)*10,(93/100)*5)
tt_5
sum(tt_5) + (38/100)*70
30/4
tt_75 <- c(0*7.5,(92/100)*7.5,(54/100)*15,(93/100)*7.5)
sum(tt_75) + (38/100)*70
30/6
30/5
30/4
tt_5 <- c(0*5,(92/100)*5,(54/100)*10,(93/100)*5)
tt_5
sum(tt_5)
sum(tt_5)+ (70/100)*38
tt_6 <- c(0*6,(92/100)*6,(54/100)*12,(93/100)*6)
sum(tt_6)+ (70/100)*38
tt_6 <- c(0*6,(92/100)*6,(54/100)*12,(93/100)*6)
sum(tt_6)+ (70/100)*38
(57.5/100)*6
(57.5/100)*5
30/6
(57.5/100)*5 + (70/100)*
0
(57.5/100)*5 + (70/100)*0
sum(c(0*6,(65/100)*6,(84/100)*6,(72/100)*12,(71/100)*6))  + (70/100)*12.5
sum(c(0*6,(65/100)*6,(84/100)*6,(72/100)*12,(71/100)*6))  + (70/100)*12.5
sum(c(0*5,(65/100)*5,(84/100)*5,(72/100)*10,(71/100)*5))  + (70/100)*12.5
sum(c(0*5,(65/100)*5,(84/100)*5,(72/100)*10,(71/100)*5))  + (70/100)*12.5
sum(c(0*6,(65/100)*6,(84/100)*6,(72/100)*12,(71/100)*6))  + (70/100)*12.5
6*4
sum(c((85/100)*5,(100/100)*5,(87/100)*5,(68/100)*10,(84/100)*5))  + (70/100)*40.5
sum(c(0*5,(65/100)*5,(84/100)*5,(72/100)*10,(71/100)*5))  + (70/100)*12.5
sum(c(0*6,(65/100)*6,(84/100)*6,(72/100)*12,(71/100)*6))  + (70/100)*12.5
sum(c(1*5,(100/100)*5,(94/100)*5,(84/100)*10,(82/100)*5))  + (70/100)*61.75
sum(c(1*5,(100/100)*5,(94/100)*5,(68/100)*10,(96/100)*5))  + (70/100)*61.75
sum(c((47.5/100)*5,(80/100)*5,(89/100)*5,(0)*10,(63/100)*5))  + (70/100)*23.25
sum((100/100)*6,(0)*6,(70/100)*12,(84/100)*6))  + (23.25/100)*70
sum((100/100)*6,(0)*6,(70/100)*12,(84/100)*6)  + (23.25/100)*70
sum((100/100)*6,(0)*6,(70/100)*12,(84/100)*6)
sum((100/100)*6,(0)*6,(70/100)*12,(84/100)*6)  + (70/100)*23.25
sum((100/100)*6,(0)*6,(70/100)*12,(84/100)*6)  + (58.75/100)*70
sum((100/100)*6,(81/100)*6,(70/100)*12,(60/100)*6)  + (27/100)*70
sum((0)*6,(92/100)*6,(54/100)*12,(93/100)*6)  + (38/100)*70
30/4
sum((87/100)*7.5,(72/100)*15,(75/100)*7.5)  + (38/100)*70
sum((87/100)*7.5,(72/100)*15,(75/100)*7.5)  + (34/100)*70
sum((50/100)*7.5,(100/100)*7.5, (84/100)*7.5, (0)*7.5)  + (12/100)*70
sum((60/100)*7.5,(80/100)*7.5, (67/100)*7.5, (85/100)*7.5)  + (3.75/100)*70
sum((60/100)*7.5,(80/100)*7.5, (67/100)*7.5, (85/100)*7.5)  + (67/100)*70
sum((80/100)*6,(100/100)*6,(89/100)*12,(65/100)*6)  + (67/100)*70
sum((80/100)*6,(100/100)*6,(65/100)*12,(89/100)*6)  + (67/100)*70
sum((60/100)*6,(65/100)*6,(66/100)*12,(71/100)*6)  + (25.25/100)*70
sum((80/100)*6,(50/100)*6,(65/100)*12,(93/100)*6)  + (36.25/100)*70
sum((85/100)*5,(80/100)*5,(66/100)*10,(76/100)*5)  + (36.25/100)*70
sum((85/100)*5,(80/100)*5,(66/100)*10,(76/100)*5)  + (34.75/100)*70
require(mulTree)
library(devtools)
library(MASS)
library(popbio)
library(popdemo)
library(phytools)
require(mulTree)
library(devtools)
library(MASS)
library(popbio)
library(popdemo)
library(phytools)
source("Demography_functions.R")
source("phylo_bind_functions.R")
load("COMADRE_v_2.0.0.9.RData")
#Metazoan backbone
met_tree <- read.tree("metazoa.tre")
met_tree  <- makeLabel(met_tree)
#Mammal phylogeny
mammal_phy <- read.nexus("FritzTree.rs200k.100trees.tre")
#Aves phylogeny
aves_phy <- read.tree("BirdzillaHackett10.tre")
#Lizard phylogeny
Lizard_phy <- read.tree("liz_and_snake_time_tree.txt")
#the makeLabel functions deals with a dublicated name problem caused by polynomies in the tree
lizard_phy<-makeLabel(Lizard_phy)
# lets also set the number of trees we will build.
# As we will have to drop trees due to the inclusion of uncertinatly in node age
# creating trees that dont corresponse with the structure of our backbone phylogeny
# we need to more than 100
sample.no <- 300
pooled_Metadata <- (subset(comadre$metadata,
MatrixComposite == "Pooled"
& MatrixDimension >= 2
& StudyDuration >= 2
& MatrixSplit == "Divided"
& MatrixFec == "Yes"
& MatrixTreatment == "Unmanipulated"
& AnnualPeriodicity == "1"
))
mean_Metadata <- (subset(comadre$metadata,
MatrixComposite == "Mean"
& MatrixDimension >= 2
& StudyDuration >= 2
& MatrixSplit == "Divided"
& MatrixFec == "Yes"
& MatrixTreatment == "Unmanipulated"
& AnnualPeriodicity == "1"
))
combined_data <- rbind(pooled_Metadata, mean_Metadata )
keep_first <- as.numeric(rownames(combined_data))
species_list <- data.frame(species =(combined_data$SpeciesAccepted), class = (combined_data$Class), phyla = (combined_data$Phylum), stringsAsFactors=FALSE )
#add humans
human_list <- c(species = "Homo_sapiens", class = "Mammalia", phyla = "Chordata" )
species_list <- rbind(species_list, human_list)
species_list_u <- unique(species_list$species)
clean_species <- comadre$metadata[keep_first,]$SpeciesAccepted
species_clean_list_u <- unique(clean_species)
full_uni <- data.frame(species_grep = species_clean_list_u,
species = species_clean_list_u ,
species_match = rep(0, length(unique(species_clean_list_u))),
matched = rep(0, length(unique(species_clean_list_u))),
taxonomic_class = rep(0, length(unique(species_clean_list_u))),
stringsAsFactors=FALSE)
##add_humans
human_list_u <- c(species_grep = "Homo_sapiens", species = "Homo_sapiens", 0,0,0)
full_uni <- rbind(full_uni, human_list_u)
###remove all the subspecies information
full_uni[,1]  <- gsub(" subsp.*","", full_uni[,1])
full_uni[,1]  <- gsub(" ","_", full_uni[,1])
species_list[,1]  <- gsub(" subsp.*","", species_list[,1])
species_list[,1]  <- gsub(" ","_", species_list[,1])
###this pulls out all the entries in the open tree of life phylogeny that correspond with the species names in our COMADRE species list.
for(i in 1:( length(full_uni[,1]))){
if(any(grep(full_uni[i,1], met_tree$tip.label)) == T){
full_uni[i,3]  <- met_tree$tip.label[grep(full_uni[i,1], met_tree$tip.label)][1]
full_uni[i,4]  <- "yes"
}
else{
full_uni[i,3]  <- full_uni[i,1]
full_uni[i,4]  <- "no"
full_uni[i,5] <- species_list[species_list$speciesAcc == c(full_uni[i,2]),"class"][1]
}
}
###addition of Class information
for(i in 1:( length(full_uni[,1]))){
full_uni[i,5] <- as.vector(species_list[(grep(full_uni[i,1],species_list[,1]))[1],"class"])
}
####remove any dubicates that might have arise from sub-species
full_uni <- full_uni[which(duplicated(full_uni$species_match) == FALSE),]
full_uni <- data.frame(full_uni,species_two = rep(0, length(full_uni[,1])))
###remove all the subspecies information
full_uni[,1]  <- gsub(" subsp.*","", full_uni[,1])
full_uni[,1]  <- gsub(" ","_", full_uni[,1])
species_list[,1]  <- gsub(" subsp.*","", species_list[,1])
species_list[,1]  <- gsub(" ","_", species_list[,1])
###this pulls out all the entries in the open tree of life phylogeny that correspond with the species names in our COMADRE species list.
for(i in 1:( length(full_uni[,1]))){
if(any(grep(full_uni[i,1], met_tree$tip.label)) == T){
full_uni[i,3]  <- met_tree$tip.label[grep(full_uni[i,1], met_tree$tip.label)][1]
full_uni[i,4]  <- "yes"
}
else{
full_uni[i,3]  <- full_uni[i,1]
full_uni[i,4]  <- "no"
full_uni[i,5] <- species_list[species_list$speciesAcc == c(full_uni[i,2]),"class"][1]
}
}
###addition of Class information
for(i in 1:( length(full_uni[,1]))){
full_uni[i,5] <- as.vector(species_list[(grep(full_uni[i,1],species_list[,1]))[1],"class"])
}
####remove any dubicates that might have arise from sub-species
full_uni <- full_uni[which(duplicated(full_uni$species_match) == FALSE),]
full_uni <- data.frame(full_uni,species_two = rep(0, length(full_uni[,1])))
###for taxinomic groups without a dated tree we need to handle them more directly
taxa_ott_match <- full_uni[full_uni$taxonomic_class %in% c("Actinopterygii","Amphibia","Anthozoa", "Bivalvia", "Insecta",
"Demospongiae", "Elasmobranchii", "Gastropoda", "Malacostraca"),
"species_match"]
###we also need to take out the tutle and croc species as these are not in the reptile phylogeny
turt_names <- c("Caretta_caretta_ott392505", "Chelodina_expansa_ott642964", "Chelydra_serpentina_ott587311",
"Chrysemys_picta_marginata_ott801475","Clemmys_guttata_ott436621", "Emydura_macquarii_krefftii_ott687926",
"Kinosternon_subrubrum_steindachneri_ott5223436", "Malaclemys_terrapin_terrapin_ott227420",
"Podocnemis_expansa_ott709468", "Sternotherus_odoratus_ott487672",
"Kinosternon_integrum_ott944915", "Kinosternon_flavescens_spooneri_ott487666",
"Podocnemis_lewyana_ott211855")
cror_names <- c("Crocodylus_johnsoni_ott458978", "Crocodylus_niloticus_ott35864")
###change the names for the species within reptiles (i.e turtles)
species_ott_match <- full_uni[full_uni$species_match %in% turt_names,"species_match"]
species_ott_match_croc <- full_uni[full_uni$species_match %in% cror_names,"species_match"]
tot_ott <- unlist(list(taxa_ott_match, species_ott_match, species_ott_match_croc))
species_two <- vector()
###this  re-reads the above species back into a list of matched names
for(i in 1:(length(full_uni$species_match))){
if(any(full_uni$species_match[i] == tot_ott) == T) {
species_two[i] <- full_uni$species_match[i]
} else{
species_two[i] <- as.vector(full_uni$species_grep[i])
}
}
#####The following species need to be named to match the phylogenies.
###changes for Jetz
species_two[species_two == "Thalassarche_melanophris"] <- "Thalassarche_melanophrys"
species_two[species_two == "Anser_caerulescens"] <- "Chen_caerulescens"
species_two[species_two == "Anthropoides_paradiseus"] <- "Grus_paradisea"
species_two[species_two == "Setophaga_cerulea"] <- "Dendroica_cerulea"
species_two[species_two == "Sternula_antillarum"] <- "Sterna_antillarum"
###changes for Prion phylgeny
species_two[species_two == "Cryptophis_nigrescens"] <- "Rhinoplocephalus_nigrescens"
species_two[species_two == "Drymarchon_couperi"] <- "Drymarchon_corais"
##Hoplocephalus_bitorquatus is actually one of three species in the genus so as long as that is not in it of Hoplocephalus stephensii
##so as long as that is not in it of Hoplocephalus stephensii its fine
species_two[species_two == "Hoplocephalus_bungaroides"] <- "Hoplocephalus_bitorquatus"
####changes for mammal phylogeny
species_two[species_two == "Callospermophilus_lateralis"] <- "Spermophilus_lateralis"
species_two[species_two == "Urocitellus_columbianus"] <- "Spermophilus_columbianus"
species_two[species_two == "Urocitellus_armatus"] <- "Spermophilus_armatus"
species_two[species_two == "Urocitellus_beldingi"] <- "Spermophilus_beldingi"
species_two[species_two == "Physeter_macrocephalus"] <- "Physeter_catodon"
####some studies have these as seperate species, however we will assume they are the same as Antechinus_stuartii is not in the  dataset
species_two[species_two == "Antechinus_agilis"] <- "Antechinus_stuartii"
full_uni$species_two <- species_two
full_mcl_croc <- full_uni[(full_uni$species_two %in% cror_names),]
fin_croc <- comparative.data(phy = met_tree, data = full_mcl_croc, names.col = "species_match" , force.root = TRUE)
tree_croc <-compute.brlen(fin_croc $phy, method = "Grafen", power = 1)
tree_croc$edge.length <- tree_croc$edge.length*13.735
croc_bird_o <- jiggle.bind(x = tree_croc,
y = aves_phy,
sample = sample.no,
min.age = 186, max.age = 249)
croc_bird <- croc_bird_o[[1]]
croc_bird_ages <- croc_bird_o[[2]]
croc_bird
croc_bird_ages
###now add turtles
full_mcl_turt <- full_uni[(full_uni$species_two %in% turt_names),]
fin_turt <- comparative.data(phy = met_tree, data = full_mcl_turt, names.col = "species_match" , force.root = TRUE)
tree_turt <-compute.brlen(fin_turt $phy, method = "Grafen", power = 1)
tree_turt$edge.length <- tree_turt$edge.length*157
turt_bird_o <- jiggle.bind(x = croc_bird,
y = tree_turt,
sample = sample.no,
min.age = 233, max.age = 274)
turt_bird <- turt_bird_o[[1]]
turt_bird_ages <- turt_bird_o[[2]]
liz_turt_bird_o <- jiggle.bind(x = lizard_phy,
y = turt_bird,
sample = sample.no,
min.age = 259, max.age = 285)
liz_turt_bird <- liz_turt_bird_o[[1]]
liz_turt_bird_ages <- liz_turt_bird_o[[2]]
amniote_tree_o <- jiggle.bind(x = liz_turt_bird,
y = mammal_phy,
sample = sample.no,
min.age = 314.6, max.age = 318.1)
amniote_tree <- amniote_tree_o[[1]]
amniote_tree_ages <- amniote_tree_o[[2]]
fish_data <- full_uni[full_uni$taxonomic_class %in% c("Actinopterygii"),]
fish_tree <- comparative.data(phy = met_tree, data = fish_data, names.col = "species_match" , force.root = TRUE)
tree_fish <-compute.brlen(fish_tree$phy, method = "Grafen", power = 1)
##Need to get a sensable split. age should be at lungfish or somerthing
tree_fish $edge.length <- tree_fish $edge.length*418.5
fish_tetrapod_tree_o <- jiggle.bind(x = amniote_tree_o,
y = tree_fish,
sample = sample.no,
min.age = 419, max.age = 419)
amniote_tree_o
fish_data <- full_uni[full_uni$taxonomic_class %in% c("Actinopterygii"),]
fish_tree <- comparative.data(phy = met_tree, data = fish_data, names.col = "species_match" , force.root = TRUE)
tree_fish <-compute.brlen(fish_tree$phy, method = "Grafen", power = 1)
##Need to get a sensable split. age should be at lungfish or somerthing
tree_fish $edge.length <- tree_fish $edge.length*418.5
fish_tetrapod_tree_o <- jiggle.bind(x = amniote_tree,
y = tree_fish,
sample = sample.no,
min.age = 419, max.age = 419)
fish_tetrapod_tree <- fish_tetrapod_tree_o[[1]]
fish_tetrapod_tree_ages <- fish_tetrapod_tree_o[[2]]
##I need to add in the one Elasmobranch
shark_names <- full_uni[full_uni$taxonomic_class %in% c("Elasmobranchii"),"species_two"]
deuterostome_tree <-  bind_single(tree = fish_tetrapod_tree, species = shark_names, sample = sample.no, root.age = 420)
proto_animals  <- full_uni[full_uni$taxonomic_class %in% c("Bivalvia", "Gastropoda",
"Insecta", "Malacostraca"),]
bi_tree <- comparative.data(phy = met_tree, data = proto_animals,
names.col = "species_match",
force.root = TRUE)
bi_tree <-compute.brlen(bi_tree$phy, method = "Grafen", power = 1)
bi_tree $edge.length <- bi_tree $edge.length*550
bilateral_tree_o <- jiggle.bind(x = deuterostome_tree,
y = bi_tree,
sample = sample.no,
min.age = 555, max.age = 558)
bilateral_tree <- bilateral_tree_o[[1]]
bilateral_tree_ages <- bilateral_tree_o[[2]]
##I need to add in the one Antozoa
coral_names <- full_uni[full_uni$taxonomic_class %in% c("Anthozoa"),"species_two"]
two_tissue_tree <-  bind_single(tree = bilateral_tree, species = coral_names, sample = sample.no, root.age = 560)
##I need to add in the one sponge
sponge_names <- full_uni[full_uni$taxonomic_class %in% c("Demospongiae"),"species_two"]
animal_tree <-  bind_single(tree = two_tissue_tree, species = sponge_names, sample = sample.no, root.age = 800)
final_tree<- list()
for(i in 1:(length(animal_tree))){
animal_tree[[i]]$node.label = "NA"
}
##Now we clean each of the trees so it only has COMADRE species in it.
for(i in 1:(length(animal_tree))){
final_tree[[i]] <- comparative.data(phy = animal_tree[[i]], data = full_uni, names.col = "species_two" , force.root = TRUE)$phy
}
###check that the ancestral nodes dont jump forward in time
###first put the ages with youngest in row 1 an doldest in the last row
node_bind_ages <- rbind(croc_bird_ages, turt_bird_ages, liz_turt_bird_ages,
amniote_tree_ages, fish_tetrapod_tree_ages, bilateral_tree_ages)
###check each colunm is monotonsly increasing
mono_tim <- vector()
for(i in 1:sample.no){
mono_tim[i] <-  all(node_bind_ages[,i] == cummax(node_bind_ages[,i]))
}
mono_tim <- data.frame(mono_tim, row_names = 1:sample.no)
mono_clean <- mono_tim[mono_tim[,1] == TRUE, "row_names"]
##now make a list of the clean trees
final_clean_trees <- list()
for(i in 1:length(mono_clean)){
final_clean_trees[[i]] <- final_tree[[mono_clean[i]]]
}
##now lets rename the tips back to match the COMADRE species
for(k in 1:length(mono_clean)){
renamed_temp <- final_clean_trees[[k]]
for(i in 1:(length(renamed_temp$tip.label))){
if(any(renamed_temp$tip.label[i] == full_uni$species_match)){
final_clean_trees[[k]]$tip.label[i] <-  gsub(" ", "_",full_uni[renamed_temp$tip.label[i] == full_uni$species_match,"species"])
}
}
}
for(k in 1:length(final_clean_trees)){
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label == "Thalassarche_melanophrys"] <- "Thalassarche_melanophris"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label == "Physeter_catodon"] <- "Physeter_macrocephalus"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label == "Spermophilus_armatus"] <- "Urocitellus_armatus"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label == "Spermophilus_columbianus"] <- "Urocitellus_columbianus"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label == "Grus_paradisea"] <- "Anthropoides_paradiseus"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label == "Dendroica_cerulea"] <- "Setophaga_cerulea"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label == "Sterna_antillarum"] <- "Sternula_antillarum"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label == "Rhinoplocephalus_nigrescens"] <- "Cryptophis_nigrescens"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label == "Drymarchon_corais"] <- "Drymarchon_couperi"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label == "Hoplocephalus_bitorquatus"] <- "Hoplocephalus_bungaroides"
}
#small fix on ultrametric problem
is_ultra <- vector()
for(i in 1:length(final_clean_trees)) {
is_ultra[i] <- is.ultrametric(final_clean_trees[[i]])
}
ultra_row <- which(is_ultra ==TRUE)
final_clean_trees_ultra <- final_clean_trees[ultra_row]
##lets take the first 100
final_clean_trees <- final_clean_trees_ultra[1:100]
class(final_clean_trees) <- "multiPhylo"
write.tree(phy = final_clean_trees, file = "COMADRE_100_phylo.tre" )
##now lets rename the tips back to match the COMADRE species
for(k in 1:length(mono_clean)){
renamed_temp <- final_clean_trees[[k]]
for(i in 1:(length(renamed_temp$tip.label))){
if(any(renamed_temp$tip.label[i] == full_uni$species_match)){
final_clean_trees[[k]]$tip.label[i] <-  gsub(" ",
"_",
full_uni[renamed_temp$tip.label[i] ==
full_uni$species_match,
"species"])
}
}
}
mono_clean
final_tree<- list()
for(i in 1:(length(animal_tree))){
animal_tree[[i]]$node.label = "NA"
}
##Now we clean each of the trees so it only has COMADRE species in it.
for(i in 1:(length(animal_tree))){
final_tree[[i]] <- comparative.data(phy = animal_tree[[i]],
data = full_uni,
names.col = "species_two",
force.root = TRUE)$phy
}
###check that the ancestral nodes dont jump forward in time
###first put the ages with youngest in row 1 an doldest in the last row
node_bind_ages <- rbind(croc_bird_ages,
turt_bird_ages,
liz_turt_bird_ages,
amniote_tree_ages,
fish_tetrapod_tree_ages,
bilateral_tree_ages)
###check each colunm is monotonsly increasing
mono_tim <- vector()
for(i in 1:sample.no){
mono_tim[i] <-  all(node_bind_ages[,i] == cummax(node_bind_ages[,i]))
}
mono_tim <- data.frame(mono_tim, row_names = 1:sample.no)
mono_clean <- mono_tim[mono_tim[,1] == TRUE, "row_names"]
##now make a list of the clean trees
final_clean_trees <- list()
for(i in 1:length(mono_clean)){
final_clean_trees[[i]] <- final_tree[[mono_clean[i]]]
}
##now lets rename the tips back to match the COMADRE species
for(k in 1:length(mono_clean)){
renamed_temp <- final_clean_trees[[k]]
for(i in 1:(length(renamed_temp$tip.label))){
if(any(renamed_temp$tip.label[i] == full_uni$species_match)){
final_clean_trees[[k]]$tip.label[i] <-  gsub(" ",
"_",
full_uni[renamed_temp$tip.label[i] ==
full_uni$species_match,
"species"])
}
}
}
for(k in 1:length(final_clean_trees)){
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label
== "Thalassarche_melanophrys"] <- "Thalassarche_melanophris"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label
== "Physeter_catodon"] <- "Physeter_macrocephalus"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label
== "Spermophilus_armatus"] <- "Urocitellus_armatus"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label
== "Spermophilus_columbianus"] <- "Urocitellus_columbianus"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label
== "Grus_paradisea"] <- "Anthropoides_paradiseus"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label
== "Dendroica_cerulea"] <- "Setophaga_cerulea"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label
== "Sterna_antillarum"] <- "Sternula_antillarum"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label
== "Rhinoplocephalus_nigrescens"] <- "Cryptophis_nigrescens"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label
== "Drymarchon_corais"] <- "Drymarchon_couperi"
final_clean_trees[[k]]$tip.label[final_clean_trees[[k]]$tip.label
== "Hoplocephalus_bitorquatus"] <- "Hoplocephalus_bungaroides"
}
#small fix on ultrametric problem
is_ultra <- vector()
for(i in 1:length(final_clean_trees)) {
is_ultra[i] <- is.ultrametric(final_clean_trees[[i]])
}
ultra_row <- which(is_ultra ==TRUE)
final_clean_trees_ultra <- final_clean_trees[ultra_row]
##lets take the first 100
final_clean_trees <- final_clean_trees_ultra[1:100]

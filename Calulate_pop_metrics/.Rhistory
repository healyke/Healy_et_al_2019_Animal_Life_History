ld50 = ld50_10,
ld50_method,
dimensions,
egg.bin,
env,
con,
fam)
spec_dropped <-as.data.frame(matrix(0, nrow = c(length(levels(mydat.max[,"species"]))),
ncol = c(2), dimnames = list(c(),c("species","dummy"))))
spec_dropped[,1] <- levels(mydat.max$species)
spec_dropped[,2] <- rep(0,length = c(length(levels(mydat.max[,"species"]))))
spec_dropped <- as.data.frame(spec_dropped)
max.dat <- comparative.data(data= spec_dropped,
phy= Tree,
names.col="species",
vcv=FALSE)
max.tree <- chronoMPL(max.dat$phy)
max.dropped <- max.dat$dropped$unmatched.rows
mydat.MAX <- mydat.max
if((length(max.dropped) > c(0)) == TRUE){
for(i in 1:(length(max.dropped))){
mydat.MAX <-mydat.MAX[mydat.MAX$species != max.dropped[i],]
}
}
##clean up the final matched data.frame
mydat.MAX <- as.data.frame(as.matrix(mydat.MAX))
mydat.MAX <- data.frame(animal = mydat.MAX$species,
species = mydat.MAX$species,
mass.aa = (as.numeric(as.character(mydat.MAX$mass))),
weigted.dist.v = (as.numeric(as.character(mydat.MAX$weigted.dist.v))),
vol.v = (as.numeric(as.character(mydat.MAX$vol.v))),
ld50 = (as.numeric(as.character(mydat.MAX$ld50))),
ld50_method  = factor(mydat.MAX$ld50_method,
levels = c("sc","iv","ip","im")),
dim = mydat.MAX$dimensions,
egg.bin = mydat.MAX$egg.bin,
env = factor(mydat.MAX$env,
levels = c("terrestrial","arboreal","aquatic")),
con = mydat.MAX$con,
fam = mydat.MAX$fam)
mydat.MAX
mydat.MAX$animal
nitt <- 12000
thin <- 1
burnin <- 2000
prior_single <- list(R = list(V = 1, nu=0.002),
G = list(G1=list(V = 1,
n = 1,
alpha.mu = rep(0,1),
alpha.V= 10^3),
G2=list(V = 1,
n = 1,
alpha.mu = rep(0,1),
alpha.V = 10^3)))
full_ld50_model <- MCMCglmm(ld50 ~
ld50_method +
dim +
egg.bin +
weigted.dist.v
,
random = ~ animal +
species,
rcov=~ units,
data = mydat.MAX,
pedigree = max.tree,
prior = prior_single,
family=c("gaussian"),
nitt = nitt, thin = thin, burnin = burnin,
verbose= FALSE)
summary(full_ld50_model)
mydat.MAX$dim
length(mydat.MAX[mydat.MAX$dim == 1,])
length(mydat.MAX[mydat.MAX$dim == 1,1])
length(unique(mydat.MAX[mydat.MAX$dim == 1,1]))
length(unique(mydat.MAX[mydat.MAX$dim == 3,1]))
length(unique(mydat.MAX[mydat.MAX$egg.bin == 1,1]))
length(unique(mydat.MAX[mydat.MAX$egg.bin == "yes",1]))
length(unique(mydat.MAX[mydat.MAX$con == "yes",1]))
###full model
mydat.prey <- na.omit(data.frame(animal,
species,
mass,
weigted.dist.v = weigted.dist.v,
vol.v,
dimensions = dimensions,
ld50 = ld50_10,
ld50_method,
dimensions,
egg.bin,
env,
con,
fam,
prey_mass = ld50_clean$prey_size_g,
mod_class,
prey_max = ld50_clean$max_prey_g))
mydat.prey <- mydat.prey[mydat.prey$animal != "Causus_rhombeatus",]
spec_dropped <-as.data.frame(matrix(0, nrow = c(length(levels(mydat.prey[,"species"]))),
ncol = c(2),
dimnames = list(c(),c("species","dummy"))))
spec_dropped[,1] <- levels(mydat.prey$species)
spec_dropped[,2] <- rep(0,length = c(length(levels(mydat.prey[,"species"]))))
spec_dropped <- as.data.frame(spec_dropped)
prey.dat <- comparative.data(data= spec_dropped,
phy= Tree,
names.col="species",
vcv=FALSE)
prey.tree <- chronoMPL(prey.dat$phy)
prey.dropped <- prey.dat$dropped$unmatched.rows
mydat.P <- mydat.prey
if((length(prey.dropped) > c(0)) == TRUE){
for(i in 1:(length(prey.dropped))){
mydat.P <-mydat.P[mydat.P$species != prey.dropped[i],]
}
}
mydat.P <- as.data.frame(as.matrix(mydat.P))
prey_mean <- log10(as.numeric(as.character(mydat.P$prey_mass)))
prey_max <- log10(as.numeric(as.character(mydat.P$prey_max)))
mydat.P <- data.frame(animal = mydat.P$species,
species = mydat.P$species,
mass.aa = (as.numeric(as.character(mydat.P$mass))),
weigted.dist.v = (as.numeric(as.character(mydat.P$weigted.dist.v))),
vol.v = (as.numeric(as.character(mydat.P$vol.v))),
ld50 = (as.numeric(as.character(mydat.P$ld50))),
ld50_method  =  factor(mydat.P$ld50_method,
levels = c("sc","iv","ip","im")),
dim = mydat.P$dimensions,
egg.bin = mydat.P$egg.bin,
env = factor(mydat.P$env,
levels = c("terrestrial","arboreal","aquatic")),
con = mydat.P$con,
fam = mydat.P$fam,
mod_class_p = mydat.P$mod_class,
prey_mean = prey_mean,
prey_max = prey_max)
mydat.prey
mydat.prey[mydat.prey$ld50_method == "sc",]
mydat.prey[mydat.prey$ld50_method == "sc",1]
length(unique(mydat.prey[mydat.prey$ld50_method == "sc",1]))
length((mydat.prey[mydat.prey$ld50_method == "sc",1]))
length((mydat.prey[mydat.prey$ld50_method == "iv",1]))
length(unique(mydat.prey[mydat.prey$ld50_method == "iv",1]))
length(unique(mydat.prey[mydat.prey$ld50_method == "ip",1]))
length((mydat.prey[mydat.prey$ld50_method == "ip",1]))
length(unique(mydat.prey[mydat.prey$ld50_method == "im",1]))
length((mydat.prey[mydat.prey$ld50_method == "im",1]))
mydat.prey$mod_class
mydat.prey$mod_class == amphibian
mydat.prey[mydat.prey$mod_class == "amphibian",]
mydat.prey[mydat.prey$mod_class == "artropod",]
5+2+31+36+34+430
88+168+195+87
length(mydat.prey[mydat.prey$mod_class == "bird",])
length(mydat.prey[mydat.prey$mod_class == "bird",1])
length(unuiqe(mydat.prey[mydat.prey$mod_class == "bird",1]))
length(uniqe(mydat.prey[mydat.prey$mod_class == "bird",1]))
length(unique(mydat.prey[mydat.prey$mod_class == "bird",1]))
(mydat.prey[mydat.prey$mod_class == "bird",1])
length(unique(mydat.prey[mydat.prey$mod_class == "bird",1]))
(mydat.prey[mydat.prey$mod_class == "bird",1])
length(unique(mydat.prey[mydat.prey$mod_class == "fish",1]))
length((mydat.prey[mydat.prey$mod_class == "fish",1]))
length((mydat.prey[mydat.prey$mod_class == "lizard",1]))
length(unique(mydat.prey[mydat.prey$mod_class == "lizard",1]))
length(unique(mydat.prey[mydat.prey$mod_class == "mammalia",1]))
length(unique(mydat.prey[mydat.prey$mod_class == "mammal",1]))
length((mydat.prey[mydat.prey$mod_class == "mammal",1]))
length((mydat.prey[mydat.prey$env == "terrestrial",1]))
length(unique(mydat.prey[mydat.prey$env == "terrestrial",1]))
length(unique(mydat.prey[mydat.prey$env == "aquatic",1]))
length(unique(mydat.prey[mydat.prey$env == "arboreol",1]))
mydat.prey$env
length(unique(mydat.prey[mydat.prey$env == "arboreal",1]))
length(unique(mydat.prey[mydat.prey$dim == 1,1]))
length(unique(mydat.prey[mydat.prey$dimensions.1 == 1,1]))
length(unique(mydat.prey[mydat.prey$dimensions.1 == 3,1]))
length(unique(mydat.prey[mydat.prey$con == "yes",1]))
length(unique(mydat.prey[mydat.prey$egg.bin == "yes",1]))
length(unique(mydat.prey[,1]))
length((mydat.prey[,1]))
library(phytools)
library(caper)
library(MCMCglmm)
library(wesanderson)
library(hdrcde)
source("MultiDisPlot.R")
ld50_data <- read.csv("snake_data_jun_18.csv",header=T,sep=",")
tree <- read.tree("liz_and_snake_time_tree.txt")
#this seems to fix a dublicate problem caused by polynomies in the tree
Tree<-makeLabel(tree)
Tree<-makeLabel(Tree)
se_error <- vector()
for(i in 1:length(ld50_data$ld50_error)){
#95% credability interval
if(ld50_data$Error_type[i] ==  "95_confidence_interval")
{se_error[i] <-  ((log10(ld50_data$ld50_mg[i]) - log10(as.numeric(gsub("-.*", "", ld50_data$ld50_error[i])))) / 1.96)}
#Standard deviation will be left as is unless I can get the number of samples
else{  if(ld50_data$Error_type[i] ==  "sd")
{lower95_temp <- (ld50_data$ld50_mg[i] - ((as.numeric(gsub("-.*", "", ld50_data$ld50_error[i])))*1.96)/(4^0.5))
se_error[i] <-  ((log10(ld50_data$ld50_mg[i]) - log10(lower95_temp)) / 1.96)}
#for range lets assume a 99% range and a z-value of 2.58
else{  if(ld50_data$Error_type[i] ==  "max_min" | ld50_data$Error_type[i] ==  "range")
{se_error[i] <-  ((log10(ld50_data$ld50_mg[i]) - log10(as.numeric(gsub("-.*", "", ld50_data$ld50_error[i])))) / 2.58)}
#for Fiducial limits we treat them as confidence intervals
else{  if(ld50_data$Error_type[i] ==  "5% Fiducial limits")
{se_error[i] <-  ((log10(ld50_data$ld50_mg[i]) - log10(as.numeric(gsub("-.*", "", ld50_data$ld50_error[i])))) / 1.96)}
else{ se_error[i] <- NA
}
}
}
}
}
se_error[which(se_error < 0)] <- 0.01
se_error_raw <- se_error
#se_error[which(is.na(se_error))] <-  max(na.omit(se_error))
ld50_clean  <- ld50_data
#mass
mass <- log10(ld50_clean $mass_grams)
animal <- ld50_clean $species
species <- ld50_clean $species
##volume
vol.v <- log10(as.numeric(as.vector(ld50_clean $venom_yield_mg)))
#dimension
dimensions <- ld50_clean $dimensions
#LD50
ld50_mg <- log10(as.vector(ld50_clean $ld50_mg))
ld50_method <- ld50_clean $ld50_method
##This just checks if eggs were rcorded within the diet.
eggs <- ld50_clean[,c("eggs")]
egg.bin <- rep(0,length(eggs))
for(i in 1:(length(eggs))){
if(ld50_clean[i,c("eggs")] > 0) egg.bin[i] <- "yes"
else egg.bin[i] <- "no"
}
##This is the weigethed evolutionary distance between prey and diet.
weigted.dist.v <- (ld50_clean$phylo_distance_diet_model_my)/100
##the species habitat
env <- ld50_clean$environment
##whether they constrict
con <- ld50_clean$constriction
##the taxinomic family of the species
fam <- ld50_clean$family
##the class of the model used to measure LD50
mod_class <- ld50_clean$ld50_model_class
###full model variables that we want with NA's removed
mydat.max <- na.omit(data.frame(animal,
species,
mass,
weigted.dist.v = weigted.dist.v,
dimensions = dimensions,
ld50 = ld50_mg,
ld50_method,
dimensions,
egg.bin,
env,
con,
fam,
mod_class,
se_error = as.vector(se_error)))
###create a dummy variable of just the species we have to prune the phylogeny
spec_dropped <-as.data.frame(matrix(0, nrow = c(length(unique(mydat.max[,"species"]))),
ncol = c(2), dimnames = list(c(),c("species","dummy"))))
spec_dropped[,1] <- unique(mydat.max$species)
spec_dropped[,2] <- rep(0,length = c(length(unique(mydat.max[,"species"]))))
spec_dropped <- as.data.frame(spec_dropped)
max.dat <- comparative.data(data= spec_dropped,
phy= Tree,
names.col="species",
vcv=FALSE)
max.tree <- chronoMPL(max.dat$phy)
max.dropped <- max.dat$dropped$unmatched.rows
mydat.MAX <- mydat.max
if((length(max.dropped) > c(0)) == TRUE){
for(i in 1:(length(max.dropped))){
mydat.MAX <-mydat.MAX[mydat.MAX$species != max.dropped[i],]
}
}
##clean up the final matched data.frame
mydat.MAX <- as.data.frame(as.matrix(mydat.MAX))
mydat.MAX <- data.frame(animal = mydat.MAX$species,
species = mydat.MAX$species,
mass.aa = (as.numeric(as.character(mydat.MAX$mass))),
weigted.dist.v =
(as.numeric(as.character(mydat.MAX$weigted.dist.v))),
ld50 = (as.numeric(as.character(mydat.MAX$ld50))),
ld50_method  = factor(mydat.MAX$ld50_method,
levels = c("sc",
"iv",
"ip",
"im")),
dim = mydat.MAX$dimensions,
egg.bin = mydat.MAX$egg.bin,
env = factor(mydat.MAX$env,
levels = c("terrestrial",
"arboreal",
"aquatic")),
con = mydat.MAX$con,
fam = mydat.MAX$fam,
mod_class = factor(mydat.MAX$mod_class,
levels = c("mammal",
"amphibian",
"artropod",
"bird",
"fish",
"lizard")),
se_er = (as.numeric(as.character(mydat.MAX$se_er))))
mydat.MAX
mydat.MAX[,1]
mydat.MAX[mydat.MAX$ld50_method == "iv",1]
length(unique(mydat.MAX[mydat.MAX$ld50_method == "iv",1]))
length((mydat.MAX[mydat.MAX$ld50_method == "iv",1]))
length((mydat.MAX[mydat.MAX$ld50_method == "sc",1]))
length(unique(mydat.MAX[mydat.MAX$ld50_method == "sc",1]))
length(unique(mydat.MAX[mydat.MAX$ld50_method == "ip",1]))
length(unique(mydat.MAX[mydat.MAX$ld50_method == "im",1]))
30+30+19+11
44+3+9
ld50_data$environment == "arboreal"
ld50_data[ld50_data$environment == "arboreal",]
ld50_data[533],]
ld50_data[533,]
44+4+9
library(popbio)
library(popdemo)
library(ape)
library(caper)
library(phytools)
library(MCMCglmm)
library(mulTree)
library(ineq)
library(pspline)
library(paran)
#devtools to get the Mage package
library(devtools)
source("COMADRE_functions.R")
pop_data <- read.csv("axis_analysis_data.csv",
sep = ",", header = T)
unq_sp <- unique(pop_data$species)
pop_length <- data.frame(matrix(0, nrow = length(unq_sp), ncol = c(2)))
for(i in 1:length(unq_sp)){
pop_length[i,1] <- as.character(pop_data[pop_data$species == as.character(unq_sp[i]),2])[1]
pop_length[i,2] <- as.numeric(as.vector(length(pop_data[pop_data$species == as.character(unq_sp[i]),1])))
}
axis_trees <- read.tree("axis_analysis_phylo.tre")
##remove this for the main run
#axis_trees <- axis_trees[1:3]
#small fix on ultrametric problem
is_ultra <- vector()
for(i in 1:100) {
is_ultra[i] <- is.ultrametric(axis_trees[[i]])
}
ultra_row <- which(is_ultra ==TRUE)
axis_trees <- axis_trees[ultra_row]
plot(axis_trees[[1]], cex = 0.2, type = "fan")
##this will be when its a multiphy object
#plot(com_tree[[sample(seq(1:(length(com_tree))),1)]], cex = 0.2)
library(popbio)
library(popdemo)
library(ape)
library(caper)
library(phytools)
library(MCMCglmm)
library(mulTree)
library(ineq)
library(pspline)
library(paran)
#devtools to get the Mage package
library(devtools)
source("COMADRE_functions.R")
pop_data <- read.csv("axis_analysis_data.csv",
sep = ",", header = T)
unq_sp <- unique(pop_data$species)
pop_length <- data.frame(matrix(0, nrow = length(unq_sp), ncol = c(2)))
for(i in 1:length(unq_sp)){
pop_length[i,1] <- as.character(pop_data[pop_data$species == as.character(unq_sp[i]),2])[1]
pop_length[i,2] <- as.numeric(as.vector(length(pop_data[pop_data$species == as.character(unq_sp[i]),1])))
}
axis_trees <- read.tree("axis_analysis_phylo.tre")
##remove this for the main run
#axis_trees <- axis_trees[1:3]
#small fix on ultrametric problem
is_ultra <- vector()
for(i in 1:100) {
is_ultra[i] <- is.ultrametric(axis_trees[[i]])
}
ultra_row <- which(is_ultra ==TRUE)
axis_trees <- axis_trees[ultra_row]
plot(axis_trees[[1]], cex = 0.2, type = "fan")
##this will be when its a multiphy object
#plot(com_tree[[sample(seq(1:(length(com_tree))),1)]], cex = 0.2)
life_shape <-  pop_data$mean_life_expect/pop_data$surv_95
pop_data$life_shape <- life_shape
pop_multree
axis_trees <- read.tree("axis_analysis_phylo.tre")
##remove this for the main run
#axis_trees <- axis_trees[1:3]
#small fix on ultrametric problem
is_ultra <- vector()
for(i in 1:100) {
is_ultra[i] <- is.ultrametric(axis_trees[[i]])
}
ultra_row <- which(is_ultra ==TRUE)
axis_trees <- axis_trees[ultra_row]
plot(axis_trees[[1]], cex = 0.2, type = "fan")
##this will be when its a multiphy object
#plot(com_tree[[sample(seq(1:(length(com_tree))),1)]], cex = 0.2)
#First make a named vector of the mean trait value.
plot_gini <- vector()
plot_l_shape <- vector()
plot_T <- vector()
plot_repo <- vector()
plot_matrix <- vector()
for(i in 1:length(axis_trees[[1]]$tip.label)){
plot_matrix[i] <- mean(pop_data[pop_data$species ==  axis_trees[[1]]$tip.label[i] ,"matrix_size"])
plot_gini[i] <- mean(pop_data[pop_data$species ==  axis_trees[[1]]$tip.label[i] ,"gini"])
plot_l_shape[i] <- mean(pop_data[pop_data$species ==  axis_trees[[1]]$tip.label[i] ,"life_shape"])
plot_T[i] <- mean(pop_data[pop_data$species ==  axis_trees[[1]]$tip.label[i] ,"gen_time"])
plot_repo[i] <- mean(pop_data[pop_data$species ==  axis_trees[[1]]$tip.label[i] ,"mean_repo_rate"])
}
names(plot_gini) <- axis_trees[[1]]$tip.label
names(plot_l_shape) <- axis_trees[[1]]$tip.label
names(plot_T) <- axis_trees[[1]]$tip.label
names(plot_repo) <- axis_trees[[1]]$tip.label
pdf("phylobar.pdf")
plotTree.wBars(tree = axis_trees[[1]], x = plot_gini, scale= 100, type="fan", cex = 0.2, tip.labels = T, fsize=0.37, width = 12)
dev.off()
names9pop_data
names(pop_data
)
log_list <- c("life_time_La",
"mean_repo_rate_stable_state",
"mean_repo_rate",
"gen_time",
"mxsd",
"M_rep_lif_exp",
"mass_g",
"matrix_size")
pop_data_log <- pop_data
pop_data_log[,log_list] <- sapply(pop_data[,log_list], function(x) log10(x))
names(pop_data_log)
log_list <- c("life_time_La",
"mean_repo_rate_stable_state",
"mean_repo_rate",
"gen_time",
"mxsd",
"mxlxsd",
"M_rep_lif_exp",
"mass_g",
"matrix_size")
pop_data_log <- pop_data
pop_data_log[,log_list] <- sapply(pop_data[,log_list], function(x) log10(x))
mean_c_list  <- c("life_shape",
"life_time_La",
"mean_repo_rate",
"gen_time",
"M_rep_lif_exp",
"matrix_size",
"gini",
"mean_repo_rate_stable_state",
"mxsd",
"mxlxsd",
"mass_g")
pop_data_log_mc <- pop_data_log
pop_data_log_mc[,mean_c_list] <- sapply(pop_data_log[,mean_c_list], function(x) mean_center(x))
log_list <- c("life_time_La",
"mean_repo_rate_stable_state",
"mean_repo_rate",
"gen_time",
"M_rep_lif_exp",
"mass_g",
"matrix_size")
pop_data_log <- pop_data
pop_data_log[,log_list] <- sapply(pop_data[,log_list], function(x) log10(x))
mean_c_list  <- c("life_shape",
"life_time_La",
"mean_repo_rate",
"gen_time",
"M_rep_lif_exp",
"matrix_size",
"gini",
"mean_repo_rate_stable_state",
"mxsd",
"mxlxsd",
"mass_g")
pop_data_log_mc <- pop_data_log
pop_data_log_mc[,mean_c_list] <- sapply(pop_data_log[,mean_c_list], function(x) mean_center(x))
life_shape_models <- read.mulTree("life_shape_run")
summary(life_shape_models)
names(pop_multree)
names(pop_multree)
pop_multree <- as.mulTree(data = pop_data_log_mc, tree = axis_trees, taxa = "animal", rand.terms = ~animal + species)
names(pop_multree)
names(pop_multree$data)
formula_mean_repo_rate_st <- mean_repo_rate_stable_state ~ mass_g + matrix_size
mulTree(mulTree.data = pop_multree,
formula = formula_mean_repo_rate_st,
priors = prior,
parameters = parameters,
output = "mean_repo_rate_st_run",
ESS = 1000,
chains = 2)
parameters <- c(1100000, 500, 100000)
prior<-list(R = list(V = 1/2, nu=0.002),
G = list(G1=list(V = 1/2,n = 1, alpha.mu=rep(0,1), alpha.V= diag(1)*10^3),
G1=list(V = 1/2,n = 1, alpha.mu=rep(0,1), alpha.V= diag(1)*10^3)))
formula_mean_repo_rate_st <- mean_repo_rate_stable_state ~ mass_g + matrix_size
mulTree(mulTree.data = pop_multree,
formula = formula_mean_repo_rate_st,
priors = prior,
parameters = parameters,
output = "mean_repo_rate_st_run",
ESS = 1000,
chains = 2)
